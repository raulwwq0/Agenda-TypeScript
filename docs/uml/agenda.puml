@startuml Agenda

package Database <<Database>> {

}
node Backend {
    class Controllers{}
}
note right: Endpoints

Backend --> Database

package agenda {


    package commons {

        class HttpService<T>{
            + get<T>()
            + post<T>()
            + put<T>()
            + delete<T>()
        }

        class StorageService<T> {
            + get(key: string): string
            + set(key: string, value: any): void
            + remove(key: string): void
        }

        interface Storage {}

        class LocalStorage implements Storage {}
        class SessionStorage implements Storage {}

        StorageService -[dashed]-> Storage: "use"

    }

    package services {
        class AgendaService {

            - contacts: Map
            - httpService: HttpService
            - localStorageService: StorageService
            + load(): Contact[]
            + insert(contact: IContact): Promise<void>
            + update(contact: IContact): Promise<void>
            + delete(id: string): Promise<void>
            - updateStorage(storageService: StorageService)
        }

        AgendaService o-- HttpService
        AgendaService o-- StorageService
    }


    package views {
        class ContactCardsView{}
        class FormsView{}
        class FormTemplate<<template>> {}
        class ContactCardTemplate<<template>> {}

        FormsView <.. FormTemplate: "Includes"
        FormsView <.. ContactCardTemplate: "Includes"
    }
    package controllers {
        class HospitalController {
            costructor(agendaService: AgendaService, FormsView: FormsView, contactCardsView: ContactCardsView)

        }

        HospitalController o-- AgendaService
        HospitalController o-- FormsView
        HospitalController o-- ContactCardsView
    }
    package models {


        class Contact {
            - id: string
            - img: string
            - name: string
            - surname: string
            - age: string
            - birthdate: string
            - phones: string[]
        }


        AgendaService "1" o- "0..*" Contact : contacts
    }
    package exceptions {
        class NonValidInputException{}
        class HttpException{}
        class ServiceTemporarilyException{}
    }

    package entities {
        class AgendaEntity<T>{}

        AgendaEntity -[dashed]-> Dexie: "use"
        Dexie -[dashed]-> indexedDB: "use"
    }

    package repositories {
        class AgendaRepository{
            + getAll(): Promise<any>
            + loadAll(values: any[]): Promise<any>
            + add(value: any): Promise<any>
            + update(value: any): Promise<any>
            + delete(id: string): Promise<any>
        }

        AgendaRepository -[dashed]-> AgendaEntity: "use"
        AgendaService o-- AgendaRepository
    }

}

package WebStorage <<Database>> {

}

AgendaRepository --> WebStorage
StorageService --> WebStorage
HttpService --> Backend
@enduml